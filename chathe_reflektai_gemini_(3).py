# -*- coding: utf-8 -*-
"""chathe_reflektai_gemini (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10_XhgNZDtVI0ioxv4JTw60iLUe0adIdT
"""

!pip install -q transformers accelerate gradio safetensors sentence-transformers
!pip install -q faiss-cpu

!pip install -r requirements_colab.txt
!pip install -q streamlit google-generativeai pyngrok

!streamlit run app_reflektai_gemini_colab.py &>/content/logs.txt &
!sleep 5
!grep -o "https://[0-9a-z\-]*\.ngrok-free.app" /content/logs.txt

import json, os, time, faiss
from typing import List, Dict, Any
import torch
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import gradio as gr
from sentence_transformers import SentenceTransformer
import warnings
warnings.filterwarnings("ignore", message="missing ScriptRunContext")
import streamlit as st
import google.generativeai as genai
import os
from pyngrok import ngrok

st.set_page_config(page_title="ReflektAI", page_icon="🪞", layout="centered")
st.title("🪞 ReflektAI — Asisten Psikologis Berbasis Gemini")
st.markdown("ReflektAI membantumu merefleksikan perasaan dan pikiran dengan empati 💬")

api_key = os.getenv("GEMINI_API_KEY")
try:
    if "GEMINI_API_KEY" in st.secrets:
        api_key = st.secrets["GEMINI_API_KEY"]
except Exception:
    pass

if not api_key:
    st.warning("🔑 GEMINI_API_KEY belum diatur. Jalankan `os.environ['GEMINI_API_KEY']='AIzaSyC9rvHizK0g_uB2UNmgpJBCS_GqtPdLRR8'` sebelum memulai.")
else:
    try:
        genai.configure(api_key=api_key)
    except Exception as e:
        st.error(f"Error konfigurasi Gemini API: {e}")

st.sidebar.header("⚙️ Pengaturan ReflektAI")
persona = st.sidebar.selectbox("Persona", ["Teman curhat yang bijak", "Coach refleksi diri", "Netral"], index=0)
style = st.sidebar.selectbox("Gaya Bahasa", ["Santai", "Formal"], index=0)
enable_memory = st.sidebar.checkbox("Aktifkan Memori Chat", value=True)
temperature = st.sidebar.slider("Kreativitas (temperature)", 0.1, 1.0, 0.6)
max_output = st.sidebar.slider("Panjang Maksimal Jawaban (tokens)", 100, 800, 400)
model_name = st.sidebar.selectbox("Model Gemini", ["gemini-1.5-flash", "gemini-1.5-pro"], index=1)

if "history" not in st.session_state:
    st.session_state.history = []

user_input = st.text_input("🗣️ Ceritakan sesuatu yang kamu rasakan hari ini...", key="input")

def build_system_instruction(persona, style):
    persona_text = {
        "Teman curhat yang bijak": "Kamu adalah teman curhat yang bijak, penuh empati, dan menenangkan.",
        "Coach refleksi diri": "Kamu adalah coach refleksi diri yang membantu pengguna memahami perasaan dan memberikan panduan refleksi.",
        "Netral": "Kamu adalah asisten refleksi netral dan sopan."
    }
    return persona_text.get(persona, "") + f" Gunakan gaya bahasa {style.lower()}. Jangan beri diagnosis medis."

def generate_response(prompt_text):
    model = genai.GenerativeModel(model_name)
    history_context = ""
    if enable_memory and st.session_state.history:
        pairs = st.session_state.history[-6:]
        history_context = "\n".join([f"User: {h['user']}\nReflektAI: {h['bot']}" for h in pairs])

    system_instruction = build_system_instruction(persona, style)
    final_prompt = f"""{system_instruction}

Riwayat percakapan sebelumnya (jika ada):
{history_context}

Pesan pengguna:
{prompt_text}
"""
    resp = model.generate_content(final_prompt, generation_config={
        "temperature": temperature,
        "max_output_tokens": max_output
    })
    if hasattr(resp, "text"):
        return resp.text
    try:
        return resp.candidates[0].content[0].text
    except Exception:
        try:
            return resp.candidates[0].content
        except Exception:
            return str(resp)

if st.button("Kirim") and user_input.strip():
    if not api_key:
        st.error("API key tidak ditemukan. Set GEMINI_API_KEY terlebih dahulu.")
    else:
        with st.spinner("💭 ReflektAI sedang berpikir..."):
            try:
                reply = generate_response(user_input)
            except Exception as e:
                reply = f"⚠️ Terjadi kesalahan: {e}"
        if enable_memory:
            st.session_state.history.append({"user": user_input, "bot": reply})
        st.markdown(f"**ReflektAI:** {reply}")

if st.session_state.history:
    st.markdown("---")
    st.markdown("### 🕊️ Riwayat Percakapan")
    for chat in reversed(st.session_state.history):
        st.markdown(f"**Kamu:** {chat['user']}")
        st.markdown(f"**ReflektAI:** {chat['bot']}")

import random

os.environ["GEMINI_API_KEY"] = "AIzaSyC9rvHizK0g_uB2UNmgpJBCS_GqtPdLRR8"
NGROK_AUTH = "33jZ5zLAMXp0x1DTkK2NBPrF4JI_51KTzaRpj86vMUHM136df"

# Disconnect any existing ngrok tunnels
ngrok.kill()

ngrok.set_auth_token(NGROK_AUTH)
# Generate a random endpoint name
endpoint_name = f"reflektai-{random.randint(1000, 9999)}"
public_url = ngrok.connect(8501, name=endpoint_name)
print("🔗 URL publik Streamlit:", public_url)

ngrok.set_auth_token(NGROK_AUTH)
public_url = ngrok.connect(8501)
print("🌐 Akses ReflektAI di URL berikut:")
print(public_url)

print("\n🚀 Menjalankan Streamlit App...")
os.system("streamlit run app_reflektai_autorun.py --server.port 8501 --server.address 0.0.0.0 &")
time.sleep(5)
print("✅ ReflektAI sudah aktif! Klik URL di atas untuk membuka aplikasi.")